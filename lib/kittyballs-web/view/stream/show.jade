extends ../layout

block title
  = "Streaming"

block content
  .span9.well
    #stream(data-session-id=sessionId, data-api-key=apiKey, data-token=token)
  .span3.well.sidebar
    br
    center
      img(src="/images/avatar.png")
    br
    ul.unstyled
      li
        strong Name: 
        span Fluffy
      li
        strong Breed: 
        span Ragdoll
      li
        strong Vaccinations: 
        span.label.label-success Fully vaccinated
      li
        strong Description: 
        span Very fluffy! Sheâ€™s always up for a good snuggle. However, not a perfect 5 due to her fur sometimes getting out of control!
      li
        br
        center
          button.btn.btn-large.btn-success Adopt

  script(
    src="http://static.opentok.com/webrtc/v2.0/js/TB.min.js",
    type="text/javascript"
  )
  script(
    id='socketio',
    src="/socket.io/socket.io.js",
    type="text/javascript",
    data-url="/")

  script(type="text/javascript")
    $(document).ready(function() {
      var apiKey = $('#stream').attr('data-api-key');
      var sessionId = $('#stream').attr('data-session-id');
      var token = $('#stream').attr('data-token');
      var socketURL = $('#socketio').attr('data-url');
      var session = TB.initSession(sessionId);

      session.connect(apiKey, token);
      session.addEventListener('sessionConnected', sessionConnectedHandler);
      session.addEventListener('streamCreated', streamCreatedHandler);
      session.addEventListener('streamDestroyed', streamDestroyedHandler);

      function setNotice() {
        $('#stream').html(
          '<h1>' + 
          'Animals are napping or otherwise unavailable, check back later!' + 
          '</h1>'
        );
        $('#stream').removeClass();
        $('#stream').attr('style', '');
      }    
 
      function streamCreatedHandler(e) {
        $('#stream').html('');
      }

      function streamDestroyedHandler(e) {
        e.preventDefault();
        setNotice(); 
      }
 
      function sessionConnectedHandler(e) {
        subscribeToStreams(e.streams);
      }

      function subscribeToStreams(streams) {
        if (streams.length == 0) {
          setNotice(); 
          return;
        }

        for (i = 0; i < streams.length; i++) {
          var stream = streams[i];
          if (stream.connection.connectionId != session.connection.connectionId) {

            $(window).resize(function() {
              $('#stream').css({
                width: $('#stream').parent().width(),
                height: Math.ceil($('#stream').parent().width() / 1.3)
              });
            });

            session.subscribe(stream, 'stream', {
              width: $('#stream').width(),
              height: Math.ceil($('#stream').width() / 1.3),
            });
          }
        }
      }

      // Controls
      var socket = io.connect(socketURL);
      socket.on('connect', function() {
        socket.emit('message', {
          action: 'join',
          role: 'subscriber',
          room: sessionId
        });
      });
      $(document).keydown(function(e) {
        var keyCode = (e.keyCode ? e.keyCode : e.which);
        console.log(keyCode)
        if (keyCode == 68) {
          // Right
          socket.emit('message', {
            action: 'right',
            room: sessionId
          });
        } else if (keyCode == 83) {
          // Down
          socket.emit('message', {
            action: 'back',
            room: sessionId
          });
        } else if (keyCode == 87) {
          // Up
          socket.emit('message', {
            action: 'roll',
            room: sessionId
          });
        } else if (keyCode == 65) {
          // Left
          socket.emit('message', {
            action: 'left',
            room: sessionId
          });
        } else if (keyCode == 32) {
          // Space
          socket.emit('message', {
            action: 'color',
            room: sessionId
          });
        }
      });
    });
